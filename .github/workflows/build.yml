name: CI - Anomaly Detection Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# Add permissions block at the workflow level
permissions:
  contents: write
  packages: write
  
jobs:
  run-pipeline:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout du code
        uses: actions/checkout@v4

      - name: Mise en place de Python
        uses: actions/setup-python@v4
        with:
            python-version: '3.10'
            cache: 'pip'
            check-latest: true

      - name: Installation des d√©pendances
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install dvc dvc[gs]

      - name: Ex√©cution du script d'anomalie
        run: |
          python train.py

      - name: Upload des artefacts g√©n√©r√©s
        uses: actions/upload-artifact@v4
        with:
          name: repo-artifacts
          path: |
            artifacts/
            figures/
            models/
            logs/
            *.py

      - name: Check Model Files
        id: check_files
        run: |
          if [ -f "./models/best_model.pkl" ]; then
            echo "model_exists=true" >> $GITHUB_OUTPUT
          else
            echo "‚ö†Ô∏è best_model.pkl not found in models directory"
            echo "model_exists=false" >> $GITHUB_OUTPUT
            echo "Contents of models directory:"
            ls -la ./models/
          fi

      - name: Create Release
        id: create_release
        if: steps.check_files.outputs.model_exists == 'true'
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: anomaly_detection_v${{ github.run_number }}
          release_name: Anomaly Detection Models - Run ${{ github.run_number }}
          body: |
            # Anomaly Detection Pipeline Results
            
            ## Generated Assets:
            - Trained Models
            - Performance Figures
            - Analysis Artifacts
            
            Run Number: ${{ github.run_number }}
            Branch: ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Best Model
        if: steps.check_files.outputs.model_exists == 'true'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./models/best_model.pkl
          asset_name: best_model.pkl
          asset_content_type: application/octet-stream

      - name: Zip Artifacts and Figures
        run: |
          if [ -d "artifacts" ]; then
            zip -r artifacts.zip artifacts/
          fi
          if [ -d "figures" ]; then
            zip -r figures.zip figures/
          fi
          if [ -d "logs" ]; then
            zip -r logs.zip logs/
          fi
          if [ -d "models" ]; then
            zip -r models.zip models/
          fi

      - name: Upload Artifacts Archive
        if: steps.check_files.outputs.model_exists == 'true'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts.zip
          asset_name: artifacts.zip
          asset_content_type: application/zip

      - name: Upload Figures Archive
        if: steps.check_files.outputs.model_exists == 'true' && steps.create_release.outputs.upload_url != ''
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./figures.zip
          asset_name: figures.zip
          asset_content_type: application/zip


          
      - name: Upload Models Archive
        if: steps.check_files.outputs.model_exists == 'true' && steps.create_release.outputs.upload_url != ''
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./models.zip
          asset_name: models.zip
          asset_content_type: application/zip



      - name: Upload Logs Archive
        if: steps.check_files.outputs.model_exists == 'true' && steps.create_release.outputs.upload_url != ''
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./logs.zip
          asset_name: logs.zip
          asset_content_type: application/zip

      - name: Publication des r√©sultats
        run: |
          # Create a markdown report
          echo "## Pipeline Results" > report.md
          echo "### Generated Artifacts" >> report.md
          ls -R artifacts/ >> report.md
          echo "### Generated Figures" >> report.md
          ls -R figures/ >> report.md
          echo "### Generated Models" >> report.md
          ls -R models/ >> report.md

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: abrahamkoloboe27
          password: ${{ secrets.PAT_ZACH }}

      - name: üêã Build and push API Docker Image
        uses: docker/build-push-action@v6
        with:
          context: ./api
          file: ./api/Dockerfile
          platforms: linux/amd64, linux/arm64
          push: true
          tags: |
            ghcr.io/abrahamkoloboe27/anomaly-detection-api:${{ github.sha }}
            ghcr.io/abrahamkoloboe27/anomaly-detection-api:latest
